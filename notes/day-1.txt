https://github.com/joydip-git/deloitte-13thFeb2023

1. HTML
2. CSS
3. JavaScript
4. OOP

HTML:
	markup language, which helps you create web app design
	composed of tags (<html>, <ul>, <div> etc.)
	tags/elements: 
			openning and closing tag
			<tag-name>		</tag-name>
	every tag will contain:
		another tag
		textual content

	*note: some tags might not conatin any of the above
		<meta> <= empty, self-closing tag
		old style: <meta />
		<meta charset='utf-8'>

	<p>
		sdhasdsakdjsajdlkASJDLKjalkj
	</p>

	<head>
		<title>
				Index
		</title>
	</head>

	attributes:
		more or less, every tag will have some properties, known as attributes
	attribute: name=value pair
	<p id="mainPara" style="width:100px">
		.....
	</p>

	*note: some attributes might not have values (since they have value which is same as that of the attribute name) and we use them directly just by attribute name
	<select multiple>
			<option selected="selected" disabled="disabled">--select--</option>
			or
			<option selected disabled>--select--</option>
			<option>Anil</option>
			<option>Sunil</option>
	</select>

	2 types of tags depending on how they display the content inside:
	a. in-line: in the same line
	b. block: one block of content will be separated from anothet block of content by new line (line-break)

HTML file structure:
every HTML file starts with <html> tag, containing <head> and <body> tag
	head:  optional, but good practice to use
				contains lots of information about a page
				contains links of other resources: CSS, JS files etc.
	
	meta: is the one which helps you to provide the information about the page. this tag can be used several times.

	viewport: logical area of display out of a device's actual screen width
			
	body: the placeholder for actual design
			  also, contains links of other resources: CSS, JS files etc
	
	header tags:
	h1 (highest font size)--- h6 (lowest font size)
	<header></header> <-- semantic tag

	web servers:(real time production server for deployment of your applicattion)
		IIS: Internet Information Services (windows o/s)
					- path: C:\inetpub\wwwroot
				Apache Tomcat
				NGINX etc.
		They all can host multiple application
		Request from any client machine for any web app hosted in the server, can be processed by these servers

		development mode web servers:
		during development time, the web application should be hosted by a web server. one instance of that server can host only ONE application at a time. these servers can proces the request that was made only from development machine, where this server is running. generally these servers do hots the web app using different port other than 80
	example: Live Server, lite-server, webpack-dev-server etc.

	CSS: Cascading stylesheet

	css-property    : value
	
	background-color:yellow
	width           :300px

	comments in CSS: /* ... */
	
	a. In-line style
	<tag style="background-color:yellow;"></tag>

	b. out-line style: (for reusability - can be applied on many elements/tags)

		A. 
		write your style within <style></style> inside the HTML file, either in head or in body tag or simultaneously in both

		create your set of styles and then apply on any tag(s) by following way:
		a. by mentioning the name of element(s)/tag(s): element selector.
			choose one or more than one element, but the style will be applied on every insatnce of those element(s) on the page
		b. by mentioning the value of "id" attribute of element(s)/tag(s): but the style will be applied on just those element(s) on the page

	in above two cases, you have to decide on which element(s)/tag(s) the style will be applied, while creating the set of styles.
	the following technique helps you create JUST the set of styles, but do not force you to decide on which tag(s) the style to be applied
	
	c. class selector: create a set of style the following way
		.class-name {
			css-prop-name1:value;
			css-prop-nam2:value;
			.......
		}

		B. create all the styles in separate CSS file and then link the CSS file with the HTML file: the same style can be reused in other HTML pages in your application


Event-driven programming model
events of HTML tags. Click event of button
JavaScript: scripting language (1994)
=> JS is dynamic programming language
		=> JS does not provide any static type checking
		=> It checks types and values all during runtime
=> JS is loosely typed programming language
=> JS is object-based programming language

chrome => JS engine is V8
firefox => JS engine is Spidermonkey
safari => JS engine JavaScript Core

ECMA
	ES2,3,5,6,7,...,
	ES6 in 2015
		=> let, const keywords

the code that we write in a JS file, is by default written inside an invisible function, known as, global function. as soon as the script file is loaded in the browser, the global function gets executed immediately. it does not wait for any event to take place.

data types
operators
control flow statements
language other features

main 5 types of data:
number, string, boolean, object and function

undefined, null, NaN, Infinity etc.

2009 => Node JS



		










